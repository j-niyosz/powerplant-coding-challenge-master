import json
import sys
from flask import Flask, jsonify, request
app = Flask(__name__)
'''
def write_json(name, power):
    data = []
    data.append({
        "name": name,
        "p": power
    })
    return data
'''


def calculate_price(price, efficiency, p_max):
    '''
    Calculation of the price for the merit-order
    '''
    price_pmax = round((price / efficiency) * p_max, 1)
    #price_pmin = round((price / efficiency) * p_min, 1)
    return price_pmax


def get_wind_power(pmax_wind, price):
    '''
    Calculation of the wind power generated
    '''
    wind_power = pmax_wind * (price/100)
    return wind_power


def nested_dict(data):
    '''
    Determination of the key and value of a dictionary
    '''
    for key, value in data.items():
        if isinstance(value, dict):
            for pair in nested_dict(value):
                yield key, *pair
        else:
            yield key, value

def main():
    '''selection of the json file for the payload'''
    with open('payload1.json', 'r') as file:
        data = json.load(file)

    '''
    Creation of the API 
    '''
    '''
    Creation of the url
    '''
    @app.route("/", methods = ['GET'])
    def get():
        return "powerplant-coding-challenge"

    '''
    Display of the payload 
    '''
    @app.route("/powerplants", methods = ['GET'])
    def get_powerplant():
        return jsonify(data)

    '''
    Creation of a new powerplant in the payload
    '''
    @app.route('/powerplants', methods=['POST'])
    def create_powerplant():
        try:
            for key, value in data.items():
                if isinstance(value, list):
                    request_data = request.get_json()
                    if (request_data['type'] == 'gasfired'
                            or request_data['type'] == 'turbojet'
                            or request_data['type'] == 'windturbine'):
                        new_powerplant = {
                        'name': request_data['name'],
                        'type': request_data['type'],
                        'efficiency': float(request_data['efficiency']),
                        'pmin': int(request_data['pmin']),
                        'pmax':int(request_data['pmax'])
                            }
                    else:
                        return jsonify({'message': 'Your powerplant has to be of a specific type just as follow : windturbine, turbojet, gasfired'})

            value.append(new_powerplant)
            return jsonify(data)

        except:
            print('The error is', sys.exc_info()[0],'The value you enter are not correct please refer to the payload ')

    '''
    Display of the power generated by each powerplant
    '''
    @app.route('/productionplant', methods = ['GET'])
    def get_power():
        load = 0
        energy_list_prices = []
        for pair in nested_dict(data):
            if pair[0] == 'fuels':
                prodc = pair[1]
                price_fuels = pair[2]
                # print('The cost for the ', prodc, 'is ', price_fuels)
                energy_list_prices.append(price_fuels)
                # print(['\n'.join([str(lst) for lst in energy_list_prices])])

            elif pair[0] == 'load':
                load = pair[1]
            else:
                continue

        ' we created a list follow this order : gas, kerosine, co2, wind'


        'This step gets values from powerplants, because is a list of dicts'

        'creation of the sorting of the powerplant based on the merit order'
        cost_list = []
        for key, value in data.items():
            if isinstance(value, list):
                for i in value:
                    ll = list(i.values())
                    name = ll[0]
                    type = ll[1]
                    efficiency = ll[2]
                    pmin = ll[3]
                    pmax = ll[4]

                    if type == 'turbojet':
                        '''
                        calculate the power generate if the powerplant is of type turbojet
                        '''
                        maxcost_turbo = calculate_price(energy_list_prices[1], efficiency, pmax)
                        p = [name, maxcost_turbo, pmax, efficiency, energy_list_prices[1]]
                        cost_list.append(p)

                    elif type == 'gasfired':
                        '''
                        calculate the power generate if the powerplant is of type gasfired
                        '''
                        maxcost_gas = calculate_price(energy_list_prices[0], efficiency, pmax)
                        q = [name, maxcost_gas, pmax, efficiency, energy_list_prices[0]]
                        cost_list.append(q)

                    elif type == 'windturbine':
                        '''
                        calculate the power generate if the powerplant is of type windturbine
                        '''
                        cost_mwh = 0
                        pmax_wind = get_wind_power(energy_list_prices[3], pmax)
                        s = [name, cost_mwh, pmax, efficiency, energy_list_prices[3]]
                        cost_list.append(s)
                        '''
                        sorting the powerplant in correlation to the power generate
                        '''
                cost_list.sort(key=lambda x: x[1])
                print(cost_list)

        'determination of the power needed by each power plant'
        target = 0
        answer = []
        for i in range(len(cost_list)):
            target += cost_list[i][2]

            a = [cost_list[i][0], cost_list[i][2]]
            answer.append(a)

            if load > target:
                name_powerplant = cost_list[i][0]
                power_powerplant = cost_list[i][2]
                tata = load - target
                z = i
            else:
                answer[i][1] = 0
        answer[z + 1][1] = tata
        'transformation of the nested list into a list of dict'
        dic = []
        key_dict = ['name', 'p']
        for i in range(len(answer)):
            dictionary = dict(zip(key_dict, answer[i]))
            dic.append(dictionary)
        return jsonify(dic)

if __name__ == '__main__':
    main()
    app.run(port=8888, debug=True)